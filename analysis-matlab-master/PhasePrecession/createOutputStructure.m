function out = createOutputStructure(inArray, trial, theta, pos, spk,...
    runs, regress, gridness, orientation, scale, kl, thetaModulation,...
    LFPthetaModulation, converged, t, outPath, outFile)
% This function collates all the outputs for all cells into a single array
% and saves it with the appropriate name and path.
%
%%    Copyright (C) <2013>  <Ali Jeewajee> <a.jeewajee@ucl.ac.uk>
% 
%     This program is free software: you can redistribute it and/or modify
%     it under the terms of the GNU General Public License as published by
%     the Free Software Foundation, either version 3 of the License, or
%     (at your option) any later version.
% 
%     This program is distributed in the hope that it will be useful,
%     but WITHOUT ANY WARRANTY; without even the implied warranty of
%     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
%     GNU General Public License for more details.
% 
%     You should have received a copy of the GNU General Public License
%     along with this program.  If not, see <http://www.gnu.org/licenses/>.

if ~isstruct(pos)
    pos = struct('fieldLabel', NaN, 'runLabel', NaN, 'phi', NaN,...
        'r', NaN, 'd_currentdir', NaN, 'd_cumulative', NaN,...
        'expectedRate_cumulative', NaN, 'd_meandir', NaN,...
        'instantaneousFiringRate', NaN, 'timeSpentWithinRun', NaN);
    
    spk = struct('time', NaN, 'posInd', NaN, 'eegInd', NaN,...
        'runLabel', NaN, 'thetaCycleLabel', NaN, 'isFirstInTheta', NaN,...
        'isLastInTheta', NaN, 'numWithinRun', NaN, 'thetaBatchLabelWithinRun', NaN);

    runs = struct('posStartInd', NaN, 'posEndInd',NaN,...
        'durationInPosBins',NaN, 'meanDir',NaN, 'tortuosity',NaN,...
        'fieldNum',NaN, 'meanSpeed',NaN, 'centralPeripheral',NaN,...
        'spikeCount',NaN, 'rateInPosBins',NaN, 'runIsHiSpike',NaN,...
        'runIsHiSpeed',NaN, 'runIsHiRate',NaN,...
        'runIsPeripheral',NaN, 'runIsTortuous',NaN);
    
    regress = struct('slope',nan(8,1), 'intercept',nan(8,1),...
        'cor',nan(8,1), 'p',nan(8,1), 'cor_boot',nan(8,1),...
        'p_shuffled',nan(8,1), 'ci',nan(8,2));
    
    out = struct('fname', inArray.filename, 'lab', inArray.lab,...
        'ratNo', uint16(inArray.ratNo), 'date', inArray.date,...
        'trialNo', uint8(inArray.trialNo), 'region', inArray.region,...
        'tetrode', uint8(inArray.tetrode), 'cluster', uint8(inArray.cluster),...
        'psr', uint8(trial.psr), 'esr', uint16(trial.esr),...
        'gridness', single(gridness), 'orientation', single(orientation),...
        'scale', single(scale), 'directionality', single(kl),...
        'thetaModulation', single(thetaModulation),...
        'LFPThetaModulation', single(LFPthetaModulation),...
        'converged', uint8(converged),...
        ...
        'phase', theta, 'pos', pos, 'spk', spk, 'runs', runs,...
        'regress', regress);
    
else
    pos = rmfield(pos,{'xy_old','xyDir_old','xy','xyDir'});

    out = struct('fname', inArray.filename, 'lab', inArray.lab,...
        'ratNo', uint16(inArray.ratNo), 'date', inArray.date,...
        'trialNo', uint8(inArray.trialNo), 'region', inArray.region,...
        'tetrode', uint8(inArray.tetrode), 'cluster', uint8(inArray.cluster),...
        'psr', uint8(trial.psr), 'esr', uint16(trial.esr),...
        'gridness', single(gridness), 'orientation', single(orientation),...
        'scale', single(scale), 'directionality', single(kl),...
        'thetaModulation', single(thetaModulation),...
        'LFPThetaModulation', single(LFPthetaModulation),...
        'converged', uint8(converged),...
        ...
        'phase', single(theta.phase),...
        ...
        'pos', struct('fieldLabel', single(pos.fieldLabel),...
        'runLabel', single(pos.runLabel),...
        'phi', single(pos.phi),...
        'r', single(pos.r),...
        'd_currentdir', single(pos.d_currentdir),...
        'd_cumulative', single(pos.d_cumulative),...
        'expectedRate_cumulative', single(pos.expectedRate_cumulative),...
        'd_meandir', single(pos.d_meandir),...
        'instantaneousFiringRate', single(pos.instantaneousFiringRate),...
        'timeSpentWithinRun', single(pos.timeSpentWithinRun)),...
        ...
        'spk', struct('time', single(spk.time), 'posInd', single(spk.posInd),...
        'eegInd', single(spk.eegInd), 'runLabel', uint16(spk.runLabel),...
        'thetaCycleLabel', uint16(spk.thetaCycleLabel),...
        'isFirstInTheta', spk.isFirstInTheta,...
        'isLastInTheta', spk.isLastInTheta,...
        'numWithinRun', uint16(spk.numWithinRun),...
        'thetaBatchLabelWithinRun', uint16(spk.thetaBatchLabelWithinRun)),...
        ...
        'runs', struct('posStartInd', single(runs.posStartInd),...
        'posEndInd',single(runs.posEndInd),...
        'durationInPosBins',single(runs.durationInPosBins),...
        'meanDir',single(runs.meanDir),...
        'tortuosity',single(runs.tortuosity),...
        'fieldNum',single(runs.fieldNum),...
        'meanSpeed',single(runs.meanSpeed),...
        'centralPeripheral',single(runs.centralPeripheral),...
        'spikeCount',single(runs.spikeCount),...
        'rateInPosBins',single(runs.rateInPosBins),...
        'runIsHiSpike',runs.runIsHiSpike,...
        'runIsHiSpeed',runs.runIsHiSpeed,...
        'runIsHiRate',runs.runIsHiRate,...
        'runIsPeripheral',runs.runIsHiRate,...
        'runIsTortuous',runs.runIsTortuous),...
        ...
        'regress', struct('slope',single(regress.slope),...
        'intercept',single(regress.intercept), 'cor',single(regress.cor),...
        'p',single(regress.p), 'cor_boot',single(regress.cor_boot),...
        'p_shuffled',single(regress.p_shuffled), 'ci',single(regress.ci))...
        );
end

a = struct(['out',num2str(t)],out);
if ~exist([outPath, outFile,'.mat'],'file')
    save([outPath, outFile,'.mat'], '-struct', 'a')
else
    save([outPath, outFile,'.mat'], '-struct', 'a', '-append')
end