function [xy_field, env]= getPlaceFieldCentres(env, n_cells, dim_x, dim_y)
% Calculate the minimum distance to walls in both x and y directions
% Calculate the minimum distance to walls in both x and y directions
x_dists = env.L == 0; % Identify wall locations
x_dists([2, dim_x], :) = 0; % Set boundary rows to zero
x_dists = bwdist(x_dists); % Compute distance to the nearest wall in x direction

y_dists = env.L == 0; % Identify wall locations
y_dists(:, [2, dim_y]) = 0; % Set boundary columns to zero
y_dists = bwdist(y_dists); % Compute distance to the nearest wall in y direction

xy_dist = env.dwmap; % Distance to walls (combined distance map)

% Set distances outside the defined environment to NaN
x_dists(env.L ~= 2) = NaN;
y_dists(env.L ~= 2) = NaN;
xy_dist(env.L ~= 2) = NaN;

% Store the calculated distances in the environment structure
env.x_dists = x_dists;
env.y_dists = y_dists;

% influence of distance setting 
influence_factor = -1/;
% Calculate sampling weights for field centers (based on inverse distance)
poss_id = find(~isnan(x_dists)); % Identify valid locations
bin_prob = (xy_dist).^(influence_factor); % Inverse distance weighting (1/root(x))
id_prob = bin_prob(poss_id); % Get probabilities for sampling

% Sample field center locations based on the calculated probabilities
id_field = randsample(poss_id, n_cells, true, id_prob);
[y_field, x_field] = ind2sub(size(x_dists), id_field); % Convert to subscripts
xy_field = [x_field, y_field]; % Store field centers

% put cells next to each other
num_coords = size(xy_field, 1);
sorted_coords = zeros(num_coords, 2);
current_index = 1;
sorted_coords(1, :) = xy_field(current_index, :);
visited = false(num_coords, 1);
visited(current_index) = true;

% Resort the coordinates so they are ordered to be close to each other -
% for visualising covar matrix
for i = 2:num_coords
    % Calculate distances from the current point to all unvisited points
    dists = sqrt(sum((xy_field(~visited, :) - xy_field(current_index, :)).^2, 2));
    
    % Get the indices of unvisited points
    unvisited_indices = find(~visited);
    
    % Find the index of the closest unvisited point
    [~, min_idx] = min(dists);
    next_index = unvisited_indices(min_idx);
    
    % Update the sorted coordinates and mark the point as visited
    sorted_coords(i, :) = xy_field(next_index, :);
    visited(next_index) = true;
    
    % Move to the next point
    current_index = next_index;
end

xy_field = sorted_coords;
plot(xy_field(:,1), xy_field(:, 2), '.')
end